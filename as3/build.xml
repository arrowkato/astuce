<?xml version="1.0" encoding="UTF-8"?>

<!--
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is [ASTUce: ActionScript Test Unit compact edition AS3]. 
  
  The Initial Developer of the Original Code is
  Zwetan Kjukov <zwetan@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2006-2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
  
-->

<project name="astuce" default="main" basedir=".">

    <!-- timestamp of the build -->
    <tstamp>
        <format property="TODAY" pattern="dd MMMM yyyy" />
    </tstamp>
    
    <!-- user can override those properties -->
    <property file="build/user.properties"/>
    
    <!--
       contributors have to define this properties
       from the contributor.tmp file
     -->
    <available file="build/contributor.properties" property="is.contributor" />
    
    <!-- optional properties for contributors only -->
    <property file="build/contributor.properties"/>
    
    <!--
       The build is intended to compile on Windows and Mac OS X
    -->
    <condition property="FLEX_HOME" value="${FLEX_HOME_MAC}">
        <os family="mac"/>
    </condition>
    
    <condition property="FLEX_HOME" value="${FLEX_HOME_WIN}">
        <os family="windows" />
    </condition>
    
    <!-- define the asdoc executable -->
    <condition property="asdoc.exe" value="${FLEX_HOME}/bin/asdoc">
        <os family="mac" />
    </condition>
    
    <condition property="asdoc.exe" value="${FLEX_HOME}/bin/asdoc.exe">
        <os family="windows" />
    </condition>
    
    <!-- define flexTasks -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
    
    <!-- define svnAnt -->
    <taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath >
            <fileset dir="build/ant/lib" includes="**/*.jar"/>
        </classpath>
    </taskdef>
    
    <echo message="fetch subversion informations" level="verbose" />
    <!--
       load the major, minor, build version number from the AS3 common source directory
       the same properties file is used in AS3 with an include
    -->
    <property file="src/buRRRn/ASTUce/version.properties"/>
    <svn username="${contributor.username}" password="${contributor.password}">
        <info target="."/>
    </svn>
    <!-- define the revision number from the svn information -->
    <property name="version.revision" value="${svn.info.lastRev}"/>
    
    <!-- general properties of the project -->
    <property file="build/build.properties"/>

    <echo message="${release.fullname} v${release.version}"/>
    
    <condition property="includesource">
        <isfalse value="${no.source}"/>
    </condition>
    
    
    <target name="clean">
        <delete dir="${release.dir}" />
        <delete dir="${release.tmp}" />
    </target>
    
    <target name="init">
        <mkdir dir="${release.dir}" />
    	<mkdir dir="${release.tmp}" />
        <!--
           export the source code to a temporary location
           to be able to manipulate some files and/or directories
         -->
        <svn>
            <export srcPath="${astuce.src}" destPath="${release.tmp.as3}" />
        </svn>
        
        <!-- delete some files we don't want to be included in the documentation or the component -->
        <delete>
            <fileset dir="${release.tmp.as3}">
              <include name="*.as"/>
              <include name="*.mxml"/>
            </fileset>
        </delete>
        
        <!-- <delete file="${release.tmp.as3}/system/foobar.as" /> -->
        <delete dir="${release.tmp.as3}/buRRRn/ASTUce/mocks" />
        
    </target>
    
    <target name="main" depends="clean,init,documentation,library_component,templates,commonfiles,package">
    </target>
    
    <target name="clean-documentation">
        <delete dir="${asdoc.output}" />
    </target>
    
    <target name="documentation" depends="clean-documentation" description="generate the documentation with asdoc">
        <echo message="generate documentation" level="verbose" />
        <mkdir dir="${asdoc.output}" />
        
        <!-- fix permission for OSX -->
        <chmod file="${asdoc.template}/asDocHelper" perm="+x"/>
        
        <!-- run asdoc -->
        <exec executable="${asdoc.exe}">
            <arg line="-verbose-stacktraces" />
            <arg line="-doc-sources ${release.tmp.as3}" />
            <arg line="-library-path+=${astuce.libs}" />
            <arg line="-output ${asdoc.output}" />
            <arg line="-package buRRRn.ASTUce 'ASTUce Application'" />
            <arg line="-templates-path ${asdoc.template}" />
            <arg line="-main-title ${asdoc.main.title}" />
            <arg line="-window-title ${asdoc.window.title}" />
            <arg line="-footer ${asdoc.footer}" />
        </exec>
        
        <copy todir="${release.dir}/doc">
            <fileset dir="${asdoc.output}" />
        </copy>
        
    </target>
    
    <target name="library_component" description="build the Library SWC component">
        <echo message="building library component" level="verbose" />
        <!--
            iterate trough the src and generate the list of classes to insert in the component
            this way we are assured that all classes without exception will be included
            in thebytecode and no need to edit by hand a "library" class.
        -->
        <fileset id="sources" dir="${release.tmp.as3}">
            <include name="**/*.as"/>
        </fileset>
        <pathconvert property="classes" pathsep=" " refid="sources">
            <chainedmapper>
                <globmapper from="${basedir}/build/tmp/as3/*" to="*"/>
                <mapper type="package" from="*.as" to="*"/>
            </chainedmapper>
        </pathconvert>
        <echo message="classes is set to = ${classes}" level="verbose" />
        
        <!-- 
            generate the Library SWC component
            this SWC is compatible Flash and Flex
         -->
        <compc
            output="${release.dir}/lib/${astuce.swc}"
            include-classes="${classes}"
            target-player="9.0.45"
        >
            <namespace uri="${astuce.namespace}" manifest="${astuce.manifest}" />
            <include-namespaces uri="${astuce.namespace}" />
            <strict>true</strict>
            <optimize>true</optimize>
            <warnings>true</warnings>
            <verbose-stacktraces>false</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <source-path path-element="${release.tmp.as3}" />
            <!--
                we want to compile against the maashaack most recent sources
                so the SWC can be used standalone
             -->
            <source-path path-element="${astuce.lib}" />
            <!--
                to compile a standalone SWC against a fixed version of maashaack SWC
                note: we may need that in the futur
             -->
            <!--<library-path dir="${astuce.libs}" includes="maashaack.swc" />-->
            <external-library-path dir="${flex.libs}/player" includes="playerglobal.swc" />
            <!--
                if we wanted to compile ASTUce with maashaack as a linked library
                note: this force the user to include both SWC in their libs
             -->
            <!--<external-library-path dir="${astuce.libs}" includes="maashaack.swc" />-->
            <metadata date="${TODAY}" title="${project.name}">
                <creator name="Zwetan Kjukov" />
                <contributor name="Marc Alcaraz" />
            </metadata>
        </compc>
        
    </target>
    
    <!--
        parse the templates for the release
        can be use also to generate samples, mxml, as, etc.
    -->
    <target name="templates" description="generate files from templates">
        <filter token="project_name" value="${project.name}"/>
        <filter token="project_shortname" value="${project.shortname}"/>
        <filter token="project_fullname" value="${project.fullname}"/>
        <filter token="project_url" value="${project.url}"/>
        <filter token="project_svn" value="${project.svn}"/>
        <filter token="project_wiki" value="${project.wiki}"/>
        <filter token="project_group" value="${project.group}"/>
        <filter token="project_maintenance" value="${project.maintenance}"/>
        <filter token="release_version" value="${release.version}"/>
        <copy file="${astuce.template}/readme.txt" todir="${release.dir}" filtering="true" />
    </target>
    
    <!-- include the source code in the release -->
    <target name="include-source" if="includesource">
        <copy todir="${release.dir}/src">
            <fileset dir="${release.tmp.as3}"/>
        </copy>
    </target>
    
    <!-- add common files to the release -->
    <target name="commonfiles" depends="include-source" description="copy common files">
        <copy file="changelog.txt" todir="${release.dir}" />
        <copy file="license.txt" todir="${release.dir}" />
    </target>
    
    <!-- package the release to a versioned zip file -->
    <target name="package" description="package the release for distribution" unless="no.package">
        <echo message="generate release zip" level="verbose" />
        <zip destfile="${release.dir}/${release.zipname}"
             basedir="${release.dir}" 
        />
        
        <delete includeemptydirs="true">
            <fileset dir="${release.dir}" includes="**/*" excludes="${release.zipname}" defaultexcludes="false"/>
        </delete>
        
    </target>
    
    <!-- reset the build to its default state -->
    <target name="reset" depends="clean,clean-documentation" description="to reset the build to its default state" >
    </target>
    
    <!-- documentation of the build -->
    <target name="help" description="documentation of the build">
        <echo message="the release files will appears in ${release.dir}/" />
        <echo message="" />
        <echo message="a) to build a normal release (default)" />
        <echo message="   doc + component (no source code) packaged in a zip" />
        <echo message="   ant main, ant" />
        <echo message="" />
        <echo message="b) to build a test release" />
        <echo message="   doc + component (not zipped)" />
        <echo message="   ant -Dno.package=true" />
        <echo message="" />
        <echo message="c) to reset the build to its default state" />
        <echo message="   ant reset" />
        <echo message="" />
        <echo message="d) to build a dev release" />
        <echo message="   doc + component + source code" />
        <echo message="   ant -Dno.source=false" />
        <echo message="" />
        <echo message="z) you can combine different options" />
        <echo message="   ant -Dno.source=false -Dno.package=true" />
        <echo message="   will generate /lib /doc /src without packaging them as zip" />
        <echo message="" />
    </target>
    
</project>